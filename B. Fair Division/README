o##r Division

" Constraints:
" Time limit per test: 2 seconds
" Memory limit per test: 256 megabytes

" Description:
" Alice and Bob received n candies from their parents. Each candy weighs either 1 gram 
" or 2 grams. They want to divide all candies among themselves fairly so that the total 
" weight of Alice's candies is equal to the total weight of Bob's candies.
"
" Check if they can do that. 
" Note that candies are not allowed to be cut in half.

" Input:
" 1. The first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases.
" 2. For each test case:
"    - The first line contains an integer n (1 ≤ n ≤ 100) — the number of candies Alice 
"      and Bob received.
"    - The second line contains n integers a1, a2, ..., an — the weights of the candies 
"      (either 1 or 2 grams).
"
" It is guaranteed that the sum of n over all test cases does not exceed 10^5.

" Output:
" For each test case, output "YES" if all candies can be divided into two sets with the 
" same total weight, otherwise output "NO".
" The output can be in any case (e.g., "YES", "yes", "Yes").

" Examples:

" Example 1:
q
" 2
" 1 1
" 2
" 1 2
" 4
" 1 2 1 2
" 3
" 2 2 2
" 3
" 2 1 2
" Output:
" YES
" NO
" YES
" NO
" NO

" Notes:
" - In the first test case, Alice and Bob can each take one candy, so both will have a 
"   total weight of 1.
" - In the second test case, any division will be unfair.
" - In the third test case, both Alice and Bob can take two candies, one of weight 1 and 
"   one of weight 2.
" - In the fourth test case, it is impossible to divide three identical candies between 
"   two people.
" - In the fifth test case, any division will also be unfair.

Approach:
Identify yes case or no case

In no case:
there are only 3 cases

There is a 2g candy leftover and zero 1 candy:
  then num2gCandy % 2 = 1
  num1gCandy % 2 = 0

there is a 1g candy leftover:
  then num2gCandy % 2 = 0
  num1gCandy % 2 = 1

there is a 2g and 1g candy leftover:
  then num2gCandy % 2 = 1
  num1gCandy % 2 = 1

in yes case:
There is even 2g and 1g:
  num2gCandy % 2 = 0
  num1gCandy % 2 = 0

There is odd 2g and even 1g and 1g more than zero:
  num2gCandy % 2 = 1
  num1gCandy % 2 = 0
  num1gCandy > 0



